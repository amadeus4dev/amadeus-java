plugins {
	id 'java'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id 'net.saliman.cobertura' version '4.0.0'
    id 'checkstyle'
    id "com.vanniktech.maven.publish" version '0.18.0'
}

compileJava {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
}

compileTestJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    doclava
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation "org.projectlombok:lombok:1.16.16"
    testImplementation "org.mockito:mockito-core:2.12.0"
    testRuntimeOnly "org.slf4j:slf4j-api:1.7.10"
    testImplementation 'junit:junit:4.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
	doclava 'com.google.doclava:doclava:1.0.6'
}

checkstyle {
    toolVersion = '8.8'
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
}

javadoc {
    dependsOn project.configurations.doclava
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
    options.memberLevel = JavadocMemberLevel.PUBLIC
    title = null
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnores = [ 'java.io.UnsupportedEncodingException', 'com.amadeus.resources.*' ]
    coverageIgnoreTrivial = true
}

test {
    useJUnitPlatform()
}

signing {
    if (project.hasProperty('SIGNING_PRIVATE_KEY') && project.hasProperty('SIGNING_PASSWORD')) {
        useInMemoryPgpKeys(project.getProperty('SIGNING_PRIVATE_KEY'), project.getProperty('SIGNING_PASSWORD'))
    }
}